// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=isAInstruction);
    Or(a=isAInstruction, b=instruction[5], out=isARegisterWrite);

    Mux16(b=aRegisterALUIn, a=instruction, sel=instruction[15], out=aRegisterIn);
    ARegister(in=aRegisterIn, load=isARegisterWrite, out=aRegisterOut, out[0..14]=addressM, out=pcIn);

    And(a=instruction[4], b=instruction[15], out=isDRegisterWrite);
    DRegister(in=dRegisterIn, load=isDRegisterWrite, out=dRegisterOut);

    Mux16(b=inM, a=aRegisterOut, sel=instruction[12], out=AorBIn);

    And(a=instruction[3], b=instruction[15], out=writeM);

    ALU(
      zx=instruction[11],
      nx=instruction[10],
      zy=instruction[9],
      ny=instruction[8],
      f=instruction[7],
      no=instruction[6],

      x=dRegisterOut,
      y=AorBIn,

      out=aRegisterALUIn,
      out=dRegisterIn,
      out=outM,

      zr=zr,
      ng=ng
    );


    Not(in=zr, out=nzr);
    Not(in=ng, out=nng);
    And(a=nzr, b=nng, out=pz);

    And(a=ng, b=instruction[2], out=isWrite0);
    And(a=zr, b=instruction[1], out=isWrite1);
    And(a=pz, b=instruction[0], out=isWrite2);
    Or8Way(in[0]=isWrite0, in[1]=isWrite1, in[2]=isWrite2, out=isJmpAll);
    And(a=isJmpAll, b=instruction[15], out=isJmp);

    PC(in=pcIn, inc=true, reset=reset, load=isJmp, out[0..14]=pc);
}
